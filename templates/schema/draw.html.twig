<html>
<head>
    <title>Schema de communications</title>
    <!-- Sigma core -->
    <script src="/build/js/sigma/sigma.core.js"></script>
    <script src="/build/js/sigma/conrad.js"></script>
    <script src="/build/js/sigma/sigma.utils.js"></script>
    <script src="/build/js/sigma/sigma.polyfills.js"></script>
    <script src="/build/js/sigma/sigma.settings.js"></script>
    <script src="/build/js/sigma/sigma.classes.dispatcher.js"></script>
    <script src="/build/js/sigma/sigma.classes.configurable.js"></script>
    <script src="/build/js/sigma/sigma.classes.graph.js"></script>
    <script src="/build/js/sigma/sigma.classes.camera.js"></script>
    <script src="/build/js/sigma/sigma.classes.quad.js"></script>
    <script src="/build/js/sigma/sigma.classes.edgequad.js"></script>
    <script src="/build/js/sigma/sigma.captors.mouse.js"></script>
    <script src="/build/js/sigma/sigma.captors.touch.js"></script>
    <script src="/build/js/sigma/sigma.renderers.canvas.js"></script>
    <script src="/build/js/sigma/sigma.renderers.webgl.js"></script>
    <script src="/build/js/sigma/sigma.renderers.svg.js"></script>
    <script src="/build/js/sigma/sigma.renderers.def.js"></script>
    <script src="/build/js/sigma/sigma.canvas.labels.def.js"></script>
    <script src="/build/js/sigma/sigma.canvas.hovers.def.js"></script>
    <script src="/build/js/sigma/sigma.canvas.nodes.def.js"></script>
    <script src="/build/js/sigma/sigma.canvas.edges.def.js"></script>
    <script src="/build/js/sigma/sigma.canvas.edges.curve.js"></script>
    <script src="/build/js/sigma/sigma.canvas.edges.arrow.js"></script>
    <script src="/build/js/sigma/sigma.canvas.edges.curvedArrow.js"></script>
    <script src="/build/js/sigma/sigma.canvas.edgehovers.def.js"></script>
    <script src="/build/js/sigma/sigma.canvas.edgehovers.curve.js"></script>
    <script src="/build/js/sigma/sigma.canvas.edgehovers.arrow.js"></script>
    <script src="/build/js/sigma/sigma.canvas.edgehovers.curvedArrow.js"></script>
    <script src="/build/js/sigma/sigma.canvas.extremities.def.js"></script>
    <script src="/build/js/sigma/sigma.middlewares.rescale.js"></script>
    <script src="/build/js/sigma/sigma.middlewares.copy.js"></script>
    <script src="/build/js/sigma/sigma.misc.animation.js"></script>
    <script src="/build/js/sigma/sigma.misc.bindEvents.js"></script>
    <script src="/build/js/sigma/sigma.misc.bindDOMEvents.js"></script>
    <script src="/build/js/sigma/sigma.misc.drawHovers.js"></script>
    <!-- Sigma plugins -->
    <script src="/build/js/sigma/supervisor.js"></script>
    <script src="/build/js/sigma/worker.js"></script>
    <script src="/build/js/sigma/sigma.plugins.relativeSize.js"></script>
    <script src="/build/js/sigma/sigma.plugins.animate.js"></script>
    <script src="/build/js/sigma/sigma.layout.noverlap.js"></script>
    <script src="/build/js/vue/vue.js"></script>
    <script src="/build/js/sigma/axios.min.js"></script>
    <style>
        html { height:100%;}
        body {height: 100%;margin:0;}
        #sigma-container { width:100%; height:100%;}
    </style>
</head>
<body>
    <div id="app">
        <div id='sigma-container'></div>
    </div>

    <script>
        window.onload = function () {
            Vue.component('v-pagination', window['vue-plain-pagination'])

            var app = new Vue({
                el: '#app',
                delimiters: ['${', '}'],
                data: {
                    edges : [],
                    nodes: [],
                    date_range : '',


                },

                watch: {
                },

                mounted (){

                    sigma.utils.pkg('sigma.canvas.nodes');
                    sigma.canvas.nodes.image = (function() {
                        var _cache = {},
                            _loading = {},
                            _callbacks = {};

                        // Return the renderer itself:
                        var renderer = function(node, context, settings) {
                            var args = arguments,
                                prefix = settings('prefix') || '',
                                size = node[prefix + 'size'],
                                color = node.color || settings('defaultNodeColor'),
                                url = node.url;

                            if (_cache[url]) {
                                context.save();

                                // Draw the clipping disc:
                                context.beginPath();
                                context.arc(
                                    node[prefix + 'x'],
                                    node[prefix + 'y'],
                                    node[prefix + 'size'],
                                    0,
                                    Math.PI * 2,
                                    true
                                );
                                context.closePath();
                                context.clip();

                                // Draw the image
                                context.drawImage(
                                    _cache[url],
                                    node[prefix + 'x'] - size,
                                    node[prefix + 'y'] - size,
                                    2 * size,
                                    2 * size
                                );

                                // Quit the "clipping mode":
                                context.restore();

                                // Draw the border:
                                context.beginPath();
                                context.arc(
                                    node[prefix + 'x'],
                                    node[prefix + 'y'],
                                    node[prefix + 'size'],
                                    0,
                                    Math.PI * 2,
                                    true
                                );
                                context.lineWidth = size / 5;
                                context.strokeStyle = node.color || settings('defaultNodeColor');
                                context.stroke();
                            } else {
                                sigma.canvas.nodes.image.cache(url);
                                sigma.canvas.nodes.def.apply(
                                    sigma.canvas.nodes,
                                    args
                                );
                            }
                        };

                        // Let's add a public method to cache images, to make it possible to
                        // preload images before the initial rendering:
                        renderer.cache = function(url, callback) {
                            if (callback)
                                _callbacks[url] = callback;

                            if (_loading[url])
                                return;

                            var img = new Image();

                            img.onload = function() {
                                _loading[url] = false;
                                _cache[url] = img;

                                if (_callbacks[url]) {
                                    _callbacks[url].call(this, img);
                                    delete _callbacks[url];
                                }
                            };

                            _loading[url] = true;
                            img.src = url;
                        };

                        return renderer;
                    })();

                    var local = window.localStorage.getItem('date_range');
                    console.log(local)
                    if (local === null){
                        window.open('/shema-commun', '_blank').focus();
                    }else {
                        tp = this
                        href = '/communication-graph/'+local
                        axios.get(href)
                            .then(function (response) {
                                console.log(response)
                                for (let i = 0 ; i < response.data.nodes.length; i++){
                                    var temp_node = {
                                        id : response.data.nodes[i]["c_number"],
                                        label: response.data.nodes[i]["a_nom"]+" ( " + response.data.nodes[i]["c_number"] + " ) ",
                                        x: Math.random(),
                                        y: Math.random(),
                                        size: '20',
                                        color: '#000000',
                                        labelColor: '#000000',
                                        type: 'image',
                                        url: '/img/'+response.data.nodes[i]["c_pic_name"],
                                    }
                                    tp.nodes.push(temp_node)
                                }

                                for (let i = 0 ; i < response.data.edges.length; i++){
                                    var temp_edge = {
                                        id : response.data.edges[i].source +'-'+ response.data.edges[i].dest,
                                        source: response.data.edges[i].source,
                                        target: response.data.edges[i].dest,
                                        color: "#"+ Math.floor(Math.random()*16777215).toString(16),
                                        type: 'arrow',
                                    }
                                    tp.edges.push(temp_edge)
                                }
                                tp.draw_sigma();
                                console.log(tp.nodes)
                            })
                    }

                },

                beforeDestroy() {
                    // remove pickadate according to its API
                },

                methods : {
                    draw_sigma: function () {
                        this.nodes.forEach(function (node){
                           console.log(node.url)
                        });
                        self = this
                        console.log(this.nodes)
                        console.log(this.edges)

                        // Initialize sigma:
                        var s = new sigma(
                            {
                                renderer: {
                                    container: document.getElementById('sigma-container'),
                                    type: 'canvas'
                                },
                                settings: {
                                    minArrowSize: 10,
                                    drawLabels: true,
                                    labelThreshold: 1,
                                    autoRescale: ['nodePosition', 'edgeSize']
                                }
                            }
                        );

                        var graph = {
                            nodes: self.nodes,
                            edges: self.edges
                        }
                        s.graph.read(graph);
// call the plugin
                       sigma.plugins.relativeSize(s, 8);

                        var nodes = s.graph.nodes();

                        var nodes_sort_array = []

                        var highest = 0
                        var highest_id = 0
                        // second create size for every node
                        for(var i = 0; i < nodes.length; i++) {
                            var degree = s.graph.degree(nodes[i].id);
                            console.log(degree)
                            if(degree >= highest) {
                                highest = degree
                                highest_id = i
                            }
                            // nodes[i].size = initialSize * Math.sqrt(degree);
                        }

                        console.log(nodes)
                        console.log(highest_id)
                        nodes[highest_id].color = "#FF0000"

                        s.refresh();
// launch force-atlas for 5sec
                        s.startForceAtlas2();
                        window.setTimeout(function() {s.killForceAtlas2()}, 10000);
                        var config = {
                            nodeMargin: 3.0,
                            scaleNodes: 1.3
                        };

// Configure the algorithm
                        var listener = s.configNoverlap(config);

// Bind all events:
                        listener.bind('start stop interpolate', function(event) {
                            console.log(event.type);
                        });

// Start the algorithm:
                        s.startNoverlap();

                    },

                    plusnode: function (s, initialSize){

                    },
                }
            })
        }

    </script>
</body>
</html>